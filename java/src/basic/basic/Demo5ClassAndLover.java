package basic.basic;

/**
 * the class is create by @Author:oweson
 *
 * @Date：2018/11/20 0020 17:40
 */
public class Demo5ClassAndLover {
    public static void main(String[] args) {
        /** 1 引用的概念，如果一个变量的类型是 类类型，而非基本类型，那么该变量又叫做引用。;
         * new Hero();
         *
         *
         * 代表创建了一个Hero对象
         * 但是也仅仅是创建了一个对象，没有办法访问它
         * 为了访问这个对象，会使用引用来代表这个对象
         *
         * Hero h = new Hero();
         *
         *
         * h这个变量是Hero类型，又叫做引用
         * =的意思指的h这个引用代表右侧创建的对象
         * “代表” 在面向对象里，又叫做“指向”*/
        /** 2 引用有多个，但是对象只有一个。
         在这个例子里，所有引用都指向了同一个对象。
         对象就像 "房产"， 引用就像"房产证"
         房产证的复印件可以有多张，但是真正的"房产" 只有这么一处;
         3  这个时候，对象1，就没有任何引用指向了
         换句话说，就没有任何手段控制和访问该对象，那么该对象就变得没有意义。
         4 方法的重载指的是方法名一样，但是参数类型不一样;
         在调用方法attack的时候，会根据传递的参数类型以及数量，自动调用对应的方法*/
        /** 5 通过一个类创建一个对象，这个过程叫做实例化

         实例化是通过调用构造方法(又叫做构造器)实现的*/
        /** 6 和普通方法一样，构造方法也可以重载;
         * this这个关键字，相当于普通话里的“我”
         *
         * 小明说 “我吃了” 这个时候，“我” 代表小明
         * 小红说 “我吃了” 这个时候，“我” 代表小红
         * "我"代表当前人物
         *
         * this这个关键字，相当于普通话里的“我”
         * this即代表当前对象*/
        /** 7 如果要在一个构造方法中，调用另一个构造方法，可以使用this();
         * 1. 属性通常使用private封装起来
         * 2. 方法一般使用public用于被调用
         * 3. 会被子类继承的方法，通常使用protected
         * 4. package用的不多，一般新手会用package,因为还不知道有修饰符这个东西
         *
         * 再就是作用范围最小原则
         * 简单说，能用private就用private，不行就放大一级，用package,再不行就用protected，最后用public。
         * 这样就能把数据尽量的封装起来，没有必要露出来的，就不用露出来了*/
        /** 8 一个属性被static修饰的时候，就叫做类属性，又叫做静态属性
         当一个属性被声明成类属性，那么所有的对象，都共享一个值 */
        /** 9 类方法： 又叫做静态方法

         对象方法： 又叫实例方法，非静态方法

         访问一个对象方法，必须建立在有一个对象的前提的基础上
         访问类方法，不需要对象的存在，直接就访问*/
        /** 10 类方法： 又叫做静态方法

         对象方法： 又叫实例方法，非静态方法

         访问一个对象方法，必须建立在有一个对象的前提的基础上
         访问类方法，不需要对象的存在，直接就访问*/
        /** 11 1. 对象.类方法

         garen.battleWin();;


         2. 类.类方法

         Hero.battleWin();;



         这两种方式都可以调用类方法，但是建议使用第二种 类.类方法 的方式进行，这样更符合语义上的理解。
         并且在很多时候，并没有实例，比如在前面练习的时候用到的随机数的获取办法 */
        /** 12 Math.random()


         random()就是一个类方法，直接通过类Math进行调用，并没有一个Math的实例存在。*/
        /** 13 类属性初始化有2种
         1. 声明该属性的时候初始化
         2. 静态初始化块*/
        /** 14 饿汉式是立即加载的方式，无论是否会用到这个对象，都会加载。
         如果在构造方法里写了性能消耗较大，占时较久的代码，比如建立与数据库的连接，那么就会在启动的时候感觉稍微有些卡顿。

         懒汉式，是延迟加载的方式，只有使用的时候才会加载。 并且有线程安全的考量(鉴于同学们学习的进度，暂时不对线程的章节做展开)。
         使用懒汉式，在启动的时候，会感觉到比饿汉式略快，因为并没有做对象的实例化。 但是在第一次调用的时候，会进行实例化操作，感觉上就略慢。

         看业务需求，如果业务上允许有比较充分的启动和初始化时间，就使用饿汉式，否则就使用懒汉式*/
        /** 15 什么是单例模式？


         回答的时候，要答到三元素
         1. 构造方法私有化
         2. 静态属性指向实例
         3. public static的 getInstance方法，返回第二步的静态属性*/
        /** 16 使用枚举，就能把范围死死的限定在这四个当中*/

    }
}
